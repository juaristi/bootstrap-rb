#!/usr/bin/env ruby
require 'date'
require "handlers"

module Bootstrap
  class Debugger
    def puts(*strs)
      if $DEBUG
        curdate = DateTime.now.strftime("%F %T")
        $stderr.print("[" + curdate + "] ")
        $stderr.puts(strs)
      end
    end
    def enabled?
      $DEBUG
    end
  end
  $debug = Bootstrap::Debugger.new

  class TargetDirectoryBusyError < Exception; end
  class TargetFileExistsError < Exception; end
  class MandatoryKeyMissingError < Exception; end

  class HookFactory
    POST_CHECKOUT_HOOK = <<S
#!/usr/bin/env ruby
# THIS GIT HOOK WAS AUTOMATICALLY GENERATED BY bootstrap-rb (http://foo.org)
# EDIT AT YOUR OWN RISK!
BT_PROJECT_ROOT = ~~BT_PROJECT_ROOT~~

bt_paths = [
  File.join(BT_PROJECT_ROOT, "bootstrap-rb"),
  File.join(BT_PROJECT_ROOT, "bootstrap.rb"),
  File.join(BT_PROJECT_ROOT, "bootstrap")
]
bt = bt_paths.reject { |f| !File.file?(f) }.first

if bt and require(bt)
  puts "-- Bootstrap script: " + bt
  old_wd = Dir.pwd
  cur_wd = File.dirname(bt)
  info = {
    "bt-root" => BT_PROJECT_ROOT,
    "bt-checkout-root" => Dir.pwd,
    "bt-checkout-git-root" => (ENV['GIT_DIR'] ? File.join(Dir.pwd, ENV['GIT_DIR']) : nil)
  }
  Dir.chdir(cur_wd)
  #h = Bootstrap::Handlers.get_handlers
  #h.post_checkout(info)
  Dir.chdir(old_wd)
else
  puts "-- Bootstrap script was not found!"
end
S
    def initialize
      @project_root = Dir.pwd
    end

    def create_hook(info)
      default_dir = ($debug.enabled? ? "" : ".")
      default_dir << "bootstrap-rb-data"
      hooks_dir = "hooks"

      raise MandatoryKeyMissingError, "Key :dir was not provided" if not info.include?(:dir)
      raise MandatoryKeyMissingError, "Key :hook was not provided" if not info.include?(:hook)
      
      if info[:dir].class == Symbol and info[:dir] == :default
        raise TargetDirectoryBusyError, default_dir if Dir.exist?(default_dir)
        
        Dir.mkdir(default_dir)
        Dir.chdir(default_dir)
        Dir.mkdir(hooks_dir)
        Dir.chdir(hooks_dir)
        target = File.join(default_dir, hooks_dir)
      elsif info[:dir].class == String
        if Dir.exist?(info[:dir]) and (info.include?(:create_new_directory) and info[:create_new_directory] == true)
          raise TargetDirectoryBusyError, info[:dir]
        elsif not Dir.exist?(info[:dir])
          Dir.mkdir(info[:dir])
        end

        Dir.chdir(info[:dir])
        Dir.mkdir(hooks_dir) unless Dir.exist?(hooks_dir)
        Dir.chdir(hooks_dir)
        target = File.join(info[:dir], hooks_dir)
      else
        raise MandatoryKeyMissingError, "Key :dir must be a String or a Symbol"
      end

      if File.exist?(info[:hook]) and (info.include?(:create_new_hook) and info[:create_new_hook] == true)
        raise TargetFileExistsError, info[:hook]
      elsif File.exist?(info[:hook])
        mode = "a"
      elsif not File.exist?(info[:hook])
        mode = "w"
      end

      File.open(info[:hook], mode) { |f|
        # Create the git hook replacing the current project root
        content = String.new(POST_CHECKOUT_HOOK)
        content["~~BT_PROJECT_ROOT~~"] = '"' + @project_root + '"'
        f.puts(content)

        # Make the file executable for the user
        # or the hook won't work
        f.chmod(0544)
      }

      # Restore initial directory
      Dir.chdir(@project_root)

      target
    end
  end
end

if $0 == __FILE__
  # h = Bootstrap::Hook.new
  begin
    # path = h.create_hook({
      # :engine => "git",
      # :hook => "post-checkout",
      # :dir => :default, # Might be an array of a list of directories to try
      # :create_new_directory => true,
      # :create_new_hook => false
    # })
    # puts "-- Created GIT post-checkout hook at '#{path}'"
    if ARGV.empty?
      config = Bootstrap::Config.get_config
      $stderr.puts "No bootstrap-rb config found in '#{Dir.pwd}'" unless config
    elsif ARGV[0].start_with?("git://") or ARGV[0].start_with?("https://")
      h = Bootstrap::HookFactory.new
      path = h.create_hook({
        :engine => 'git',
        :url => ARGV[0],
        :hook => "post-checkout",
        :dir => :default,
        :create_new_directory => true,
        :create_new_hook => false
      })
      $debug.puts "-- Created GIT post-checkout hook at '#{path}'"
    elsif File.exists?(ARGV[0])
      # TODO implement this
    else
      $stderr.puts "Argument '#{ARGV[0]}' is neither a GIT repository nor a regular file."
    end
  rescue Bootstrap::TargetDirectoryBusyError => e
    $stderr.puts "-- Temporary directory '#{e.message}' already exists. Aborting."
  end
end

