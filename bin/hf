#!/usr/bin/env ruby
require 'date'
require "handlers"

module Hf
  class Debugger
    def puts(*strs)
      if $DEBUG
        curdate = DateTime.now.strftime("%F %T")
        $stderr.print("[" + curdate + "] ")
        $stderr.puts(strs)
      end
    end
    def enabled?
      $DEBUG
    end
  end
  $debug = Hf::Debugger.new
end

if $0 == __FILE__
  # h = Hf::Hook.new
  begin
    # path = h.create_hook({
      # :engine => "git",
      # :hook => "post-checkout",
      # :dir => :default, # Might be an array of a list of directories to try
      # :create_new_directory => true,
      # :create_new_hook => false
    # })
    # puts "-- Created GIT post-checkout hook at '#{path}'"
    if ARGV.empty?
      config = Hf::Config.get_config
			$stderr.puts "No hf config found in '#{Dir.pwd}'" unless config
		elsif File.exists?(ARGV[0])
			config = Hf::Config.get_config(ARGV[0])
			$stderr.puts "Could not load file '#{ARGV[0]}'." unless config
    elsif ARGV[0].start_with?("git://") or ARGV[0].start_with?("https://")
      h = Hf::HookFactory.new
      path = h.create_hook({
        :engine => 'git',
        :url => ARGV[0],
        :hook => "post-checkout",
        :dir => :default,
        :create_new_directory => true,
        :create_new_hook => false
      })
      $debug.puts "-- Created GIT post-checkout hook at '#{path}'"
    else
      $stderr.puts "Argument '#{ARGV[0]}' is neither a GIT repository nor a regular file."
    end
  rescue Hf::TargetDirectoryBusyError => e
    $stderr.puts "-- Temporary directory '#{e.message}' already exists. Aborting."
  end
end

